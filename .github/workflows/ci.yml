permissions:
  contents: read
name: CI

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main] # Only run on main pushes
  pull_request:
    branches: [main]
    types: [opened, synchronize, ready_for_review] # Skip draft PRs
    paths-ignore: # Skip CI for documentation-only changes
      - "**.md"
      - "docs/**"
      - ".kiro/**"

jobs:
  # Fast syntax check - fails early to save costs
  syntax-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-syntax-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-syntax-
            ${{ runner.os }}-pip-
      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Critical syntax check with ruff
        run: |
          # Fast-fail on critical syntax errors (E9, F63, F7, F82 equivalent)
          ruff check project/ --select=E9,F63,F7,F82 --output-format=github

  # Parallel security scan job for faster execution
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for gitleaks

      - name: Security scan with gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Organizations, not personal accounts.

  test:
    needs: [syntax-check, security-scan] # Only run if both syntax check and security scan pass
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"] # Match local development version
    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      REPORT_CHANNEL_ID: ${{ secrets.REPORT_CHANNEL_ID }}
      COMMAND_PREFIX: ${{ vars.COMMAND_PREFIX }}
      CASE_INSENSITIVE: ${{ vars.CASE_INSENSITIVE }}
      MAX_WARNINGS_BEFORE_ACTION: ${{ vars.MAX_WARNINGS_BEFORE_ACTION }}
      ENABLE_AUDIT_LOGGING: ${{ vars.ENABLE_AUDIT_LOGGING }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ci-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-ci-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Python quality check with ruff
        run: |
          # Run comprehensive Python linting with ruff (much faster than flake8)
          ruff check project/ --output-format=github
      - name: Python formatting check with ruff
        run: |
          # Check if code is properly formatted
          ruff format project/ --check

      - name: Fast test (critical tests only)
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)/project"
          # Run full test suite with coverage
          pytest tests/ -v --tb=short --cov=project --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
